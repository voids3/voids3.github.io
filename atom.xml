<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>惊鸿</title>
  
  
  <link href="/voids3.github.io/atom.xml" rel="self"/>
  
  <link href="http://voids3.github.io/voids3.github.io/"/>
  <updated>2019-10-30T12:56:56.626Z</updated>
  <id>http://voids3.github.io/voids3.github.io/</id>
  
  <author>
    <name>voids</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>回文子序列计数</title>
    <link href="http://voids3.github.io/voids3.github.io/2019/10/30/%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97%E8%AE%A1%E6%95%B0/"/>
    <id>http://voids3.github.io/voids3.github.io/2019/10/30/回文子序列计数/</id>
    <published>2019-10-30T12:41:14.000Z</published>
    <updated>2019-10-30T12:56:56.626Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://ac.nowcoder.com/acm/problem/21587" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/problem/21587</a></p><p>题目大意：给你一段字符串，统计每个字符作为回文中心的次数，然后按题意所给方式计算最后结果</p><p>解题思路：难点在于怎样统计每个字符作为回文中心的次数。</p><p>首先我们想到的是计算每个字符左右两边匹配字符的对数，从而求出结果。但这样遍历的话，应该会超时。</p><a id="more"></a><p>我们先假设某一个字符为中心字符，从右边往这个中心字符遍历，建立一个数组表示中心字符左右两边匹配字符的对数，每多出一对，就在该位置上增加多出来的种类数<br>详见代码。</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3005</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line">ll x[N],y[N],dp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">s[<span class="number">0</span>]=<span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line">x[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=len;j&gt;i;j--)&#123;</span><br><span class="line">cnt=dp[j];</span><br><span class="line"><span class="comment">//左右两边有n对相等的字符对应的删除种类数:</span></span><br><span class="line"><span class="comment">//0 1</span></span><br><span class="line"><span class="comment">//1 1+1 </span></span><br><span class="line"><span class="comment">//2 1+1+2</span></span><br><span class="line"><span class="comment">//3 1+1+2+3 </span></span><br><span class="line"><span class="keyword">if</span>(s[i<span class="number">-1</span>]==s[j])&#123;</span><br><span class="line">dp[j]=(dp[j]+sum+<span class="number">1</span>)%mod;<span class="comment">//dp[j]表示多出一对匹配的字符增加的种类数 </span></span><br><span class="line">&#125;</span><br><span class="line">sum=(sum+cnt)%mod;<span class="comment">//sum则表示在该轮匹配中上一个字符dp[j]的个数 </span></span><br><span class="line">x[i]=(x[i]+dp[j])%mod;<span class="comment">//每个字母是回文中心的个数 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ll ans=x[<span class="number">1</span>]*<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=len;i++)&#123;</span><br><span class="line">ans=ans^(x[i]*i)%mod;<span class="comment">//异或的计算方法 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://ac.nowcoder.com/acm/problem/21587&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ac.nowcoder.com/acm/problem/21587&lt;/a&gt;&lt;/p&gt;&lt;p&gt;题目大意：给你一段字符串，统计每个字符作为回文中心的次数，然后按题意所给方式计算最后结果&lt;/p&gt;&lt;p&gt;解题思路：难点在于怎样统计每个字符作为回文中心的次数。&lt;/p&gt;&lt;p&gt;首先我们想到的是计算每个字符左右两边匹配字符的对数，从而求出结果。但这样遍历的话，应该会超时。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="dp" scheme="http://voids3.github.io/voids3.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>Anna, Svyatoslav and Maps</title>
    <link href="http://voids3.github.io/voids3.github.io/2019/10/28/Anna-Svyatoslav-and-Maps/"/>
    <id>http://voids3.github.io/voids3.github.io/2019/10/28/Anna-Svyatoslav-and-Maps/</id>
    <published>2019-10-28T13:57:10.000Z</published>
    <updated>2019-10-29T08:36:06.099Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://codeforces.com/problemset/problem/1204/C" target="_blank" rel="noopener">https://codeforces.com/problemset/problem/1204/C</a></p><p>题目大意：给你一个长度为m的p串，找到p的一个字串按照该子序列进行最短路径移动时可以经过完整的p串。</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NN = <span class="number">1e6</span>+<span class="number">5</span>; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> d[N][N],n,m;</span><br><span class="line"><span class="keyword">int</span> a[NN],p[NN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span></span>&#123;<span class="comment">//最短路 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">d[i][j]=min(d[i][j],d[i][k]+d[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">char</span> ch=getchar();</span><br><span class="line">d[i][j]=(ch==<span class="string">'1'</span>?<span class="number">1</span>:inf);</span><br><span class="line"><span class="keyword">if</span>(i==j) d[i][j]=<span class="number">0</span>;<span class="comment">//这点很重要 </span></span><br><span class="line">&#125;</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;p[i];</span><br><span class="line">&#125;</span><br><span class="line">floyd();</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>,dis=<span class="number">0</span>;<span class="comment">//表示当前点到答案点的距离 </span></span><br><span class="line">a[++cnt]=p[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;i++)&#123;</span><br><span class="line">dis+=(d[p[i<span class="number">-1</span>]][p[i]]);</span><br><span class="line"><span class="comment">//cout&lt;&lt;dis&lt;&lt;" "&lt;&lt;d[a[cnt]][p[i]]&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(dis&gt;d[a[cnt]][p[i]])&#123;<span class="comment">//如果距离大于记录点到该点的距离，则将上一个点记录</span></span><br><span class="line">a[++cnt]=p[i<span class="number">-1</span>];</span><br><span class="line">dis=d[a[cnt]][p[i]];<span class="comment">//更新距离 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a[++cnt]=p[m];<span class="comment">//将最后一个点加入记录</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;cnt&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目链接：&lt;a href=&quot;https://codeforces.com/problemset/problem/1204/C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://codeforces.com/problemset/problem/
      
    
    </summary>
    
    
    
      <category term="最短路" scheme="http://voids3.github.io/voids3.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round #590 D. Distinct Characters Queries</title>
    <link href="http://voids3.github.io/voids3.github.io/2019/10/22/Codeforces-Round-590-D-Distinct-Characters-Queries/"/>
    <id>http://voids3.github.io/voids3.github.io/2019/10/22/Codeforces-Round-590-D-Distinct-Characters-Queries/</id>
    <published>2019-10-22T13:20:13.000Z</published>
    <updated>2019-10-22T13:43:33.956Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://codeforces.com/contest/1234/problem/D" target="_blank" rel="noopener">https://codeforces.com/contest/1234/problem/D</a></p><p>题目大意：给你一段字符串.</p><p>操作1 ：将字符串x位置的字符改为字符z；</p><p>操作2 : 在x,y范围内找到不同字符的个数。</p><p>用到了线段树的知识，不知道的可以去b站看up主“正月点灯笼”的相关讲解。</p><p>详见代码</p><p>Code:</p><a id="more"></a><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> tree[N*<span class="number">4</span>],t,n,x,y;<span class="comment">//线段树要开四倍数组大小 </span></span><br><span class="line"><span class="keyword">char</span> z;</span><br><span class="line"><span class="keyword">string</span> ss;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> build_tree(<span class="keyword">int</span> node,<span class="keyword">int</span> start,<span class="keyword">int</span> <span class="built_in">end</span>)&#123; <span class="comment">//建树 </span></span><br><span class="line"><span class="built_in">if</span>(start==<span class="built_in">end</span>)&#123;</span><br><span class="line">tree[node] = <span class="number">1</span>&lt;&lt;(ss[start]-<span class="string">'a'</span>);<span class="comment">//将每个点的字母通过数然后用二进制表示</span></span><br><span class="line"><span class="comment">//如果ss[start]-'a'==0,左移一位后变为1</span></span><br><span class="line"><span class="comment">//                   1               10</span></span><br><span class="line"><span class="comment">//                   2-&gt;10           100</span></span><br><span class="line"><span class="comment">//以此类推，每个数都可以表示为一个所有位只有一个1的二进制数</span></span><br><span class="line"><span class="comment">//然后通过或运算得出来的数位上有几个1，就代表有几个不同的数，可以自己模拟一下 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> left_node=node*<span class="number">2</span>+<span class="number">1</span>; <span class="comment">//通过模拟，可以知道该节点的左子节点的位置 </span></span><br><span class="line"><span class="keyword">int</span> right_node=node*<span class="number">2</span>+<span class="number">2</span>;<span class="comment">//同理 </span></span><br><span class="line"><span class="keyword">int</span> mid = start+<span class="built_in">end</span>&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build_tree(left_node,start,mid);<span class="comment">//递归 </span></span><br><span class="line">build_tree(right_node,mid+<span class="number">1</span>,<span class="built_in">end</span>);</span><br><span class="line">tree[node]=tree[left_node] | tree[right_node]; <span class="comment">//父节点的数等于左右子节点的或运算后的值 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> update_tree(<span class="keyword">int</span> node,<span class="keyword">int</span> start,<span class="keyword">int</span> <span class="built_in">end</span>,<span class="keyword">int</span> idx,<span class="keyword">int</span> val)&#123;<span class="comment">//对节点更新 </span></span><br><span class="line"><span class="built_in">if</span>(start==<span class="built_in">end</span>)&#123;</span><br><span class="line">tree[node]=val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> left_node = <span class="number">2</span>*node+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> right_node = <span class="number">2</span>*node+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> mid = (start+<span class="built_in">end</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">if</span>(idx&lt;=mid)&#123;</span><br><span class="line">update_tree(left_node,start,mid,idx,val);</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">else</span>&#123;</span><br><span class="line">update_tree(right_node,mid+<span class="number">1</span>,<span class="built_in">end</span>,idx,val);</span><br><span class="line">&#125; </span><br><span class="line">tree[node]=tree[left_node] | tree[right_node];</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> query_tree(<span class="keyword">int</span> node,<span class="keyword">int</span> start,<span class="keyword">int</span> <span class="built_in">end</span>,<span class="keyword">int</span> L,<span class="keyword">int</span> R)&#123;</span><br><span class="line"><span class="built_in">if</span>(L&gt;<span class="built_in">end</span>||R&lt;start) <span class="built_in">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">else</span> <span class="built_in">if</span>(L&lt;=start&amp;&amp;R&gt;=<span class="built_in">end</span>)&#123;</span><br><span class="line"><span class="built_in">return</span> tree[node];</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> left_node=node*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> right_node=node*<span class="number">2</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> mid=start+<span class="built_in">end</span>&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">res |= query_tree(left_node,start,mid,L,R);</span><br><span class="line">res |= query_tree(right_node,mid+<span class="number">1</span>,<span class="built_in">end</span>,L,R);</span><br><span class="line"><span class="built_in">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main()&#123;</span><br><span class="line">cin&gt;&gt;ss;</span><br><span class="line"><span class="keyword">int</span> len=ss.length();</span><br><span class="line">build_tree(<span class="number">0</span>,<span class="number">0</span>,len<span class="number">-1</span>);</span><br><span class="line"><span class="comment">//for(int i=0;i&lt;13;i++)&#123;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;tree[i]&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="built_in">while</span>(t--)&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="built_in">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;z;</span><br><span class="line">update_tree(<span class="number">0</span>,<span class="number">0</span>,len<span class="number">-1</span>,x<span class="number">-1</span>,<span class="number">1</span>&lt;&lt;(z-<span class="string">'a'</span>)); <span class="comment">//我是从0节点开始建树，所以更新的节点应减一 </span></span><br><span class="line"><span class="comment">//for(int i=0;i&lt;13;i++)&#123;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;tree[i]&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">else</span> &#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">int</span> res=query_tree(<span class="number">0</span>,<span class="number">0</span>,len<span class="number">-1</span>,x<span class="number">-1</span>,y<span class="number">-1</span>);<span class="comment">//同上 </span></span><br><span class="line"><span class="comment">//cout&lt;&lt;"**********\n";</span></span><br><span class="line"><span class="built_in">while</span>(res)&#123;</span><br><span class="line"><span class="built_in">if</span>(res&amp;<span class="number">1</span>)&#123;<span class="comment">//计算res表示的二进制数位上有几个1 </span></span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">res&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://codeforces.com/contest/1234/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://codeforces.com/contest/1234/problem/D&lt;/a&gt;&lt;/p&gt;&lt;p&gt;题目大意：给你一段字符串.&lt;/p&gt;&lt;p&gt;操作1 ：将字符串x位置的字符改为字符z；&lt;/p&gt;&lt;p&gt;操作2 : 在x,y范围内找到不同字符的个数。&lt;/p&gt;&lt;p&gt;用到了线段树的知识，不知道的可以去b站看up主“正月点灯笼”的相关讲解。&lt;/p&gt;&lt;p&gt;详见代码&lt;/p&gt;&lt;p&gt;Code:&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://voids3.github.io/voids3.github.io/categories/C/"/>
    
    
      <category term="线段树" scheme="http://voids3.github.io/voids3.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>食物链</title>
    <link href="http://voids3.github.io/voids3.github.io/2019/10/15/%E9%A3%9F%E7%89%A9%E9%93%BE/"/>
    <id>http://voids3.github.io/voids3.github.io/2019/10/15/食物链/</id>
    <published>2019-10-15T11:36:31.000Z</published>
    <updated>2019-10-15T11:43:47.559Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="http://poj.org/problem?id=1182" target="_blank" rel="noopener">http://poj.org/problem?id=1182</a></p><p>题解链接：<a href="https://www.luogu.org/problemnew/solution/P2024" target="_blank" rel="noopener">https://www.luogu.org/problemnew/solution/P2024</a></p><p>洛谷上Sooke写的题解很容易理解，刚开始看了好多题解没看懂，看到了两种题解，这个是容易理解且代码量少的。另外一种等我弄懂了再贴出来。</p><a id="more"></a><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> pre[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//寻找父节点 </span></span><br><span class="line"><span class="keyword">if</span>(x==pre[x]) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> pre[x]=find(pre[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(find(x)==find(y))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="comment">//合并同类 </span></span><br><span class="line"><span class="keyword">int</span> fx=find(x),fy=find(y);</span><br><span class="line"><span class="keyword">if</span>(fx!=fy) pre[fx]=fy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">int</span> d,x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>*n;i++) pre[i]=i;<span class="comment">//变为三个范围 </span></span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;d,&amp;x,&amp;y);</span><br><span class="line"><span class="keyword">int</span> fx=find(x),fy=find(y);</span><br><span class="line"><span class="keyword">if</span>(x&gt;n||y&gt;n||x&lt;<span class="number">0</span>||y&lt;<span class="number">0</span>)&#123;</span><br><span class="line">sum++;<span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(d==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(same(x,y+n)||same(x,y+<span class="number">2</span>*n)) sum++;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">join(x,y);</span><br><span class="line">join(x+n,y+n);</span><br><span class="line">join(x+<span class="number">2</span>*n,y+<span class="number">2</span>*n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(d==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(same(x,y)||same(x,y+<span class="number">2</span>*n)) sum++;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">join(x,y+n);</span><br><span class="line">join(x+n,y+<span class="number">2</span>*n);</span><br><span class="line">join(x+<span class="number">2</span>*n,y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文链接：&lt;a href=&quot;http://poj.org/problem?id=1182&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://poj.org/problem?id=1182&lt;/a&gt;&lt;/p&gt;&lt;p&gt;题解链接：&lt;a href=&quot;https://www.luogu.org/problemnew/solution/P2024&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.luogu.org/problemnew/solution/P2024&lt;/a&gt;&lt;/p&gt;&lt;p&gt;洛谷上Sooke写的题解很容易理解，刚开始看了好多题解没看懂，看到了两种题解，这个是容易理解且代码量少的。另外一种等我弄懂了再贴出来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://voids3.github.io/voids3.github.io/categories/C/"/>
    
    
      <category term="并查集" scheme="http://voids3.github.io/voids3.github.io/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>国庆训练4</title>
    <link href="http://voids3.github.io/voids3.github.io/2019/10/06/%E5%9B%BD%E5%BA%86%E8%AE%AD%E7%BB%834/"/>
    <id>http://voids3.github.io/voids3.github.io/2019/10/06/国庆训练4/</id>
    <published>2019-10-06T13:59:33.000Z</published>
    <updated>2019-10-06T14:09:55.608Z</updated>
    
    <content type="html"><![CDATA[<p>F.Free Weights</p><p>题目链接：<a href="https://codeforces.com/gym/101170/attachments" target="_blank" rel="noopener">https://codeforces.com/gym/101170/attachments</a></p><p>题目大意：给你两排杠铃，每排的数量为n，即n对某一重量的杠铃，任意重量的杠铃可以不费力的推到相邻的空地方，问最少拿动多少的杠铃，可以使重量相等的杠铃排在一起。</p><p>解题思路：刚开始以为上下相同也算排在一起，结果想了好久没有思路，后来看题解原来只有在一排排在一起才可以。<br>我们可以先找到给定的杠铃中最重的一个，然后二分。其中还会使用到入栈出栈的操作。</p><a id="more"></a><p>Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line">ll a[N],b[N],n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(ll k)</span></span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;k)&#123;</span><br><span class="line"><span class="keyword">if</span>(s.empty()) s.push(a[i]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s.top()==a[i]) s.pop();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!s.empty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i]&gt;k)&#123;</span><br><span class="line"><span class="keyword">if</span>(s.empty()) s.push(b[i]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s.top()==b[i]) s.pop();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!s.empty()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll maxx=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">maxx=max(a[i],maxx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;b[i];</span><br><span class="line">maxx=max(b[i],maxx);</span><br><span class="line">&#125;</span><br><span class="line">ll l=<span class="number">0</span>,r=maxx,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;<span class="comment">// 二分</span></span><br><span class="line">ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid))&#123;</span><br><span class="line">ans=mid;</span><br><span class="line">r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;F.Free Weights&lt;/p&gt;&lt;p&gt;题目链接：&lt;a href=&quot;https://codeforces.com/gym/101170/attachments&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://codeforces.com/gym/101170/attachments&lt;/a&gt;&lt;/p&gt;&lt;p&gt;题目大意：给你两排杠铃，每排的数量为n，即n对某一重量的杠铃，任意重量的杠铃可以不费力的推到相邻的空地方，问最少拿动多少的杠铃，可以使重量相等的杠铃排在一起。&lt;/p&gt;&lt;p&gt;解题思路：刚开始以为上下相同也算排在一起，结果想了好久没有思路，后来看题解原来只有在一排排在一起才可以。&lt;br&gt;我们可以先找到给定的杠铃中最重的一个，然后二分。其中还会使用到入栈出栈的操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="国庆训练" scheme="http://voids3.github.io/voids3.github.io/categories/%E5%9B%BD%E5%BA%86%E8%AE%AD%E7%BB%83/"/>
    
    
  </entry>
  
  <entry>
    <title>Hpu 国庆训练2</title>
    <link href="http://voids3.github.io/voids3.github.io/2019/10/06/Hpu-%E5%9B%BD%E5%BA%86%E8%AE%AD%E7%BB%832/"/>
    <id>http://voids3.github.io/voids3.github.io/2019/10/06/Hpu-国庆训练2/</id>
    <published>2019-10-06T12:33:30.000Z</published>
    <updated>2019-10-11T01:10:02.970Z</updated>
    
    <content type="html"><![CDATA[<p>A.Chat Group</p><p>题目链接：<a href="http://codeforces.com/gym/101775/problem/A" target="_blank" rel="noopener">http://codeforces.com/gym/101775/problem/A</a></p><p>题目大意：给你n个人，在这n个人中找至少k个人建一个群，问最多可以建多少个群</p><p>解题思路：所求为C(k,n) + C(k+1,n) +…+ C(n,n);由于n的范围是1e9,而k的范围是1e5,所以转化为2^k-C(1,n)-..-C(k-1,n);<br>由于在求组合数中需要取模，用除法不好计算，所以用逆元来求。</p><a id="more"></a><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">ll inv[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;<span class="comment">//逆元打表</span></span><br><span class="line">inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">inv[i]=(mod-(mod/i))*inv[mod%i]%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">ksm</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%mod;</span><br><span class="line">a=a*a%mod;</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll t,n,k;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> mm=<span class="number">1</span>;mm&lt;=t;mm++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">ll sum=ksm(<span class="number">2</span>,n)<span class="number">-1</span>;</span><br><span class="line">ll t=n,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;k;)&#123;</span><br><span class="line">ans=(ans+t)%mod;</span><br><span class="line">t=(t*(n-i)%mod*inv[++i])%mod;</span><br><span class="line">&#125;</span><br><span class="line">ans=(sum-ans+mod)%mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d: %lld\n"</span>,mm,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B.Scapegoat</p><p>题目链接：<a href="http://codeforces.com/gym/101775/problem/B" target="_blank" rel="noopener">http://codeforces.com/gym/101775/problem/B</a></p><p>题目大意：犯了n个错误，m个人承担，每个错误的严重程度不同，让求m个人承受严重程度的最小方差</p><p>解题思路：先让每个人承担一个错误，然后让剩下的m-n个人，去和其他人承受一个错误，但这需要判断和谁一起承担，所以需要用到优先队列。要使方差最小，需要用到贪心，只要使每个人承受的错误大小在平均数上下即可。详见代码。</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">double</span> a[N];</span><br><span class="line"><span class="keyword">double</span> s;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> id,n;<span class="comment">//承担错误的编号，承担某一错误的人数 </span></span><br><span class="line"><span class="keyword">double</span> cal,r;<span class="comment">//承担错误的大小 </span></span><br><span class="line">node(<span class="keyword">int</span> _id=<span class="number">0</span>,<span class="keyword">int</span> _n=<span class="number">0</span>,<span class="keyword">double</span> _cal=<span class="number">0</span>)&#123;<span class="comment">//初始化每个都要为0 </span></span><br><span class="line">id=_id,n=_n,cal=_cal;</span><br><span class="line"><span class="keyword">double</span> res1=(cal-s)*(cal-s)*n;</span><br><span class="line"><span class="keyword">double</span> res2=(a[id]/(n+<span class="number">1</span>)-s)*(a[id]/(n+<span class="number">1</span>)-s)*(n+<span class="number">1</span>);</span><br><span class="line">r=res1-res2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (node a,node b)&#123;</span><br><span class="line"><span class="keyword">return</span> a.r&lt;b.r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//ios::sync_with_stdio(false);</span></span><br><span class="line"><span class="comment">//cin.tie(0);cout.tie(0);</span></span><br><span class="line"><span class="keyword">int</span> t,mm=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">priority_queue&lt;node&gt;q;</span><br><span class="line">s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;a[i]);</span><br><span class="line">s+=a[i];</span><br><span class="line">&#125;</span><br><span class="line">s/=m;<span class="comment">//注意不是n，是m个人承担错误 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) q.push(node(i,<span class="number">1</span>,a[i]));</span><br><span class="line"><span class="keyword">int</span> temp=m-n;</span><br><span class="line"><span class="keyword">while</span>(temp--)&#123;</span><br><span class="line">node p=q.top();</span><br><span class="line">q.pop();</span><br><span class="line">q.push(node(p.id,p.n+<span class="number">1</span>,a[p.id]/(p.n+<span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> pp=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">b[pp++]=q.top();</span><br><span class="line">q.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;pp;i++)&#123;</span><br><span class="line">ans+=(b[i].cal-s)*(b[i].cal-s)*b[i].n;</span><br><span class="line">&#125;</span><br><span class="line">ans/=m;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d: %.10lf\n"</span>,mm++,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>L.SOS</p><p>题目链接：<a href="http://codeforces.com/gym/101775/problem/L" target="_blank" rel="noopener">http://codeforces.com/gym/101775/problem/L</a></p><p>题目大意：给你一张1*N的棋盘，两个人下棋，谁先得到连续的SOS标志谁就胜利。Panda先生先手。</p><p>解题思路：1.S_ <em>S是必胜局面，谁先营造出这样的局面且在这外面还有偶数个空位置。对于先手，当 N=7 时，先手先在4位置下一个S，则不管后手怎么下，先手都能创造出S</em> _S的局面。然后观察7以后的奇数都可以创造出这样的局面，所以大于7的奇数都是先手赢。<br>    2. 那什么时候后手能赢呢，想一想先手赢得条件，我们可以想到剩余7个连续空位置给后手操作时会营造对后手有利的局面，但考虑到先手要先放，所以可以想到–8 ，但什么时候不管怎样先手怎么下，都会给后手留下8个连续空格子呢，我们推一下就可以得到16，15的话是不满足的。由此可以得出当n&gt;=16,且为偶数时，后手赢。其余情况平局。</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t,n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">if</span>(n&gt;=<span class="number">7</span>&amp;&amp;n%<span class="number">2</span>==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"Case #%d: Panda\n"</span>,i);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n&gt;=<span class="number">16</span>&amp;&amp;n%<span class="number">2</span>==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"Case #%d: Sheep\n"</span>,i);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Case #%d: Draw\n"</span>,i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>J.Straight Master </p><p>题目链接：<a href="http://codeforces.com/gym/101775/problem/J" target="_blank" rel="noopener">http://codeforces.com/gym/101775/problem/J</a></p><p>题目大意：给你一些牌，让你将这些牌按照3-5 张的顺序打出去，问这些牌能否都分成3-5 张的序列</p><p>解题思路：先介绍一下差分：</p><p>差分就是将数列中的每一项分别与前一项数做差，例如：</p><p>一个序列1 2 5 4 7 3，差分后得到1 1 3 -1 3 -4 -3</p><p>这里注意得到的差分序列第一个数和原来的第一个数一样（相当于第一个数减0）</p><p>差分序列最后比原序列多一个数（相当于0减最后一个数）</p><p>性质：</p><p>1、差分序列求前缀和可得原序列</p><p>2、将原序列区间[L,R]中的元素全部+1，可以转化操作为差分序列L处+1，R+1处-1</p><p>3、按照性质2得到，每次修改原序列一个区间+1，那么每次差分序列修改处增加的和减少的相同</p><p>由于要分成3-5 张的序列，只要保证每一段&gt;=3 即可，详见代码。</p><p>Code :</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> mm=<span class="number">1</span>;mm&lt;=t;mm++)&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">0</span>,b[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">b[i]=a[i]-a[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">b[n+<span class="number">1</span>]=-a[n];</span><br><span class="line"><span class="keyword">if</span>(b[<span class="number">2</span>]&lt;<span class="number">0</span>||b[<span class="number">3</span>]&lt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d: No\n"</span>,mm);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;b[i]&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(b[i]&gt;<span class="number">0</span>) sum+=b[i];</span><br><span class="line"><span class="keyword">int</span> p=i+<span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>(p&gt;n+<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(b[p]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">sum+=b[p];</span><br><span class="line">b[p]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sum&lt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;sum&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(sum==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"Case #%d: Yes\n"</span>,mm);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Case #%d: No\n"</span>,mm);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>K.Downgrade </p><p>题目链接：<a href="http://codeforces.com/gym/101775/problem/K" target="_blank" rel="noopener">http://codeforces.com/gym/101775/problem/K</a></p><p>题目大意：一个sb在玩一个sb游戏，游戏有主等级和次等级，当次等级达到最大的时候，主等级才会升级，当这个sb一天不玩的话，主等级就会化为经验，次等级归为1，然后看这些经验所能达到的等级就是这个人现在的等级。</p><p>解题思路：当时写的时候读了好久，没看懂，后来一看题解秒懂，就是需要再注意当这个人的主等级变成和开始等级相同，就说明后来会是重复的，break就可以了。</p><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> l[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t,a,b,n,mm=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;a,&amp;b,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;l[i]);</span><br><span class="line"><span class="keyword">int</span> temp,pre;<span class="comment">//经验值，最初等级</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">temp=a;b=<span class="number">1</span>;pre=a;a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> q=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(--temp)&#123;</span><br><span class="line">++b;</span><br><span class="line"><span class="keyword">if</span>(b&gt;l[q])&#123;</span><br><span class="line">++a;</span><br><span class="line">b=<span class="number">1</span>;</span><br><span class="line">++q;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a==pre) <span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d: %d-%d\n"</span>,mm++,a,b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A.Chat Group&lt;/p&gt;&lt;p&gt;题目链接：&lt;a href=&quot;http://codeforces.com/gym/101775/problem/A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://codeforces.com/gym/101775/problem/A&lt;/a&gt;&lt;/p&gt;&lt;p&gt;题目大意：给你n个人，在这n个人中找至少k个人建一个群，问最多可以建多少个群&lt;/p&gt;&lt;p&gt;解题思路：所求为C(k,n) + C(k+1,n) +…+ C(n,n);由于n的范围是1e9,而k的范围是1e5,所以转化为2^k-C(1,n)-..-C(k-1,n);&lt;br&gt;由于在求组合数中需要取模，用除法不好计算，所以用逆元来求。&lt;/p&gt;
    
    </summary>
    
    
      <category term="国庆训练" scheme="http://voids3.github.io/voids3.github.io/categories/%E5%9B%BD%E5%BA%86%E8%AE%AD%E7%BB%83/"/>
    
    
      <category term="逆元" scheme="http://voids3.github.io/voids3.github.io/tags/%E9%80%86%E5%85%83/"/>
    
  </entry>
  
  <entry>
    <title>Gathering Children</title>
    <link href="http://voids3.github.io/voids3.github.io/2019/09/28/Gathering-Children/"/>
    <id>http://voids3.github.io/voids3.github.io/2019/09/28/Gathering-Children/</id>
    <published>2019-09-28T12:43:38.000Z</published>
    <updated>2019-09-28T13:15:03.972Z</updated>
    
    <content type="html"><![CDATA[<p>解题思路：最后数只会留在相邻的RL两个位置，对于每个L,用id数组记录左边离它最近的R位置，对于每个R，记录右边离它最近的L的位置;类似于以下情况：</p><p>i:      1 2 3 4 5 6 7 8 9  10  11   12<br> —-     R R L L L L R L R  R   L    L<br>id[i]:  3 3 2 2 2 2 8 7 11 11  10   10 </p><a id="more"></a><pre><code>然后遍历整个字符串，t=abs(i-id[i]);L:t为奇数，最后到L位置，否则到R位置R:t为奇数，最后到R位置，否则到L位置</code></pre><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> idx,id[<span class="number">100005</span>],ans[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,ch+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> n=<span class="built_in">strlen</span>(ch+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[i]==<span class="string">'L'</span>) id[i]=idx;</span><br><span class="line"><span class="keyword">else</span> idx=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[i]==<span class="string">'R'</span>) id[i]=idx;</span><br><span class="line"><span class="keyword">else</span> idx=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[i]==<span class="string">'L'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>((i-id[i])%<span class="number">2</span>==<span class="number">1</span>) ans[id[i]+<span class="number">1</span>]++;</span><br><span class="line"><span class="keyword">else</span> ans[id[i]]++; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>((id[i]-i)%<span class="number">2</span>==<span class="number">1</span>) ans[id[i]<span class="number">-1</span>]++;</span><br><span class="line"><span class="keyword">else</span> ans[id[i]]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解题思路：最后数只会留在相邻的RL两个位置，对于每个L,用id数组记录左边离它最近的R位置，对于每个R，记录右边离它最近的L的位置;类似于以下情况：&lt;/p&gt;&lt;p&gt;i:      1 2 3 4 5 6 7 8 9  10  11   12&lt;br&gt; —-     R R L L L L R L R  R   L    L&lt;br&gt;id[i]:  3 3 2 2 2 2 8 7 11 11  10   10 &lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://voids3.github.io/voids3.github.io/categories/C/"/>
    
    
      <category term="模拟" scheme="http://voids3.github.io/voids3.github.io/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>Alyona and Spreadsheet</title>
    <link href="http://voids3.github.io/voids3.github.io/2019/09/22/Alyona-and-Spreadsheet/"/>
    <id>http://voids3.github.io/voids3.github.io/2019/09/22/Alyona-and-Spreadsheet/</id>
    <published>2019-09-22T15:02:44.000Z</published>
    <updated>2019-09-29T11:52:38.423Z</updated>
    
    <content type="html"><![CDATA[<p>解题思路：</p><pre><code>用二维数组逐个查找会超时，用多个一维数组来表示：a[]存储每一行的值，b[]表示每一列最高能到达的行数,c[]表示每一行的数最高能到达的行数；具体看代码。</code></pre><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],b[N],c[N];<span class="comment">//每一行的值，每一列能到达的最上行，每一行能到达的最上行 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,x;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) b[i]=<span class="number">1</span>;<span class="comment">//初始化最上行为1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">c[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line"><span class="keyword">if</span>(x&lt;a[j]) b[j]=i;<span class="comment">//更新每一列最高到达的行数</span></span><br><span class="line">a[j]=x;<span class="comment">//更新一行每列的值</span></span><br><span class="line"><span class="keyword">if</span>(c[i]&gt;b[j]) c[i]=b[j];<span class="comment">//c表示最高能到达的行数，越小行数越高</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> k,l,r;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line"><span class="keyword">while</span>(k--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="keyword">if</span>(c[r]&lt;=l)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;解题思路：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;用二维数组逐个查找会超时，用多个一维数组来表示：


a[]存储每一行的值，b[]表示每一列最高能到达的行数,c[]表示每一行的数最高能到达的行数
；具体看代码。&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Code:&lt;/p&gt;
&lt;figure c
      
    
    </summary>
    
    
      <category term="C++" scheme="http://voids3.github.io/voids3.github.io/categories/C/"/>
    
    
      <category term="cf" scheme="http://voids3.github.io/voids3.github.io/tags/cf/"/>
    
  </entry>
  
  <entry>
    <title>删括号</title>
    <link href="http://voids3.github.io/voids3.github.io/2019/09/19/%E5%88%A0%E6%8B%AC%E5%8F%B7/"/>
    <id>http://voids3.github.io/voids3.github.io/2019/09/19/删括号/</id>
    <published>2019-09-19T15:09:19.000Z</published>
    <updated>2019-09-19T15:23:03.482Z</updated>
    
    <content type="html"><![CDATA[<p>原题链接：<a href="https://ac.nowcoder.com/acm/problem/21303" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/problem/21303</a></p><p>解题思路：用dp[i][j][k]数组，i表示s1前i个字符，j表示s2的前j个字符，k=s1删去的’(‘-s1删去的’)’;<br>    如果s1前i个字符删去k个 ‘(‘ 与s2相符，则令dp[i][j][k]==true，最终只要满足dp[len1-1][len2-1][0]==true,即为Possible</p><a id="more"></a><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> dp[N][N][N]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> ss,tt;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;ss&gt;&gt;tt;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">int</span> len1=ss.length();</span><br><span class="line"><span class="keyword">int</span> len2=tt.length();</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len1;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len2;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;len1/<span class="number">2</span>;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[i][j][k])&#123;</span><br><span class="line"><span class="comment">//当删除恰好为"()",且符合目标状态 </span></span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">0</span>&amp;&amp;ss[i+<span class="number">1</span>]==tt[j+<span class="number">1</span>]) dp[i+<span class="number">1</span>][j+<span class="number">1</span>][k]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//下一字符为"(",差值k+1 </span></span><br><span class="line"><span class="keyword">if</span>(ss[i+<span class="number">1</span>]==<span class="string">'('</span>) dp[i+<span class="number">1</span>][j][k+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//凑够(),删去),差值k-1 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k) dp[i+<span class="number">1</span>][j][k<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dp[len1<span class="number">-1</span>][len2<span class="number">-1</span>][<span class="number">0</span>]) <span class="built_in">printf</span>(<span class="string">"Possible\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原题链接：&lt;a href=&quot;https://ac.nowcoder.com/acm/problem/21303&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ac.nowcoder.com/acm/problem/21303&lt;/a&gt;&lt;/p&gt;&lt;p&gt;解题思路：用dp[i][j][k]数组，i表示s1前i个字符，j表示s2的前j个字符，k=s1删去的’(‘-s1删去的’)’;&lt;br&gt;    如果s1前i个字符删去k个 ‘(‘ 与s2相符，则令dp[i][j][k]==true，最终只要满足dp[len1-1][len2-1][0]==true,即为Possible&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://voids3.github.io/voids3.github.io/categories/C/"/>
    
    
      <category term="dp" scheme="http://voids3.github.io/voids3.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>[HNOI2003]操作系统 </title>
    <link href="http://voids3.github.io/voids3.github.io/2019/09/19/HNOI2003-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>http://voids3.github.io/voids3.github.io/2019/09/19/HNOI2003-操作系统/</id>
    <published>2019-09-19T14:53:44.000Z</published>
    <updated>2019-09-19T15:08:45.442Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://ac.nowcoder.com/acm/problem/20030" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/problem/20030</a></p><p>解题思路：首先建立一个优先队列，队列中元素由优先级从大到小排列，如果优先级相同，则按开始时间从小到大排列<br>        如果队列为空，则向其中添加进程，进程进行过程有以下两种情况<br>        1.j进程可以在i进程开始之前结束，则将j进程从队列踢出并进行输出<br>        2.j进程不能在i进程开始之前结束，则更新j进程的操作时间，然后重新入队<br>        （如果i进程优先级小于等于j进程，由于i的开始时间小于j，故j进程仍比i进程先进行完，但还要比较j进程是否与其他进程的开始时间冲突）</p><a id="more"></a><p>Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> id,st,ct,pr;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (node a,node b)&#123;<span class="comment">//优先队列 </span></span><br><span class="line"><span class="keyword">if</span>(a.pr==b.pr) <span class="keyword">return</span> a.st&gt;b.st;<span class="comment">//如果优先级相同，返回开始时间小的 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> a.pr&lt;b.pr;<span class="comment">//返回优先级大的 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;tt[N];</span><br><span class="line"></span><br><span class="line">priority_queue&lt;node&gt;q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;tt[cnt].id,&amp;tt[cnt].st,&amp;tt[cnt].ct,&amp;tt[cnt].pr)) cnt++;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> now;</span><br><span class="line"><span class="keyword">while</span>(i&lt;cnt)&#123;</span><br><span class="line"><span class="keyword">if</span>(q.empty()) q.push(tt[i]),now=tt[i].st,i++;<span class="comment">//队列为空，则向其中添加元素 </span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">node bb=q.top();q.pop();</span><br><span class="line"><span class="keyword">if</span>(now+bb.ct&lt;=tt[i].st)&#123;<span class="comment">//队顶进程能在下一个进程开始前完成 </span></span><br><span class="line">now+=bb.ct;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %lld\n"</span>,bb.id,now);</span><br><span class="line"><span class="comment">//q.push(tt[i]);now=tt[i].st;i++; //直接加入不行，但不知道原因</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">bb.ct=bb.ct-tt[i].st+now;<span class="comment">//如果不能完成，则更新队顶进程的操作时间，重新入队 </span></span><br><span class="line">now=tt[i].st;</span><br><span class="line">q.push(bb),q.push(tt[i]);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;<span class="comment">//将队列中剩余元素输出 </span></span><br><span class="line">node dd=q.top();</span><br><span class="line">q.pop();</span><br><span class="line">now+=dd.ct;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %lld\n"</span>,dd.id,now);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://ac.nowcoder.com/acm/problem/20030&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ac.nowcoder.com/acm/problem/20030&lt;/a&gt;&lt;/p&gt;&lt;p&gt;解题思路：首先建立一个优先队列，队列中元素由优先级从大到小排列，如果优先级相同，则按开始时间从小到大排列&lt;br&gt;        如果队列为空，则向其中添加进程，进程进行过程有以下两种情况&lt;br&gt;        1.j进程可以在i进程开始之前结束，则将j进程从队列踢出并进行输出&lt;br&gt;        2.j进程不能在i进程开始之前结束，则更新j进程的操作时间，然后重新入队&lt;br&gt;        （如果i进程优先级小于等于j进程，由于i的开始时间小于j，故j进程仍比i进程先进行完，但还要比较j进程是否与其他进程的开始时间冲突）&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://voids3.github.io/voids3.github.io/categories/C/"/>
    
    
      <category term="优先队列" scheme="http://voids3.github.io/voids3.github.io/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>被3整除的子序列 </title>
    <link href="http://voids3.github.io/voids3.github.io/2019/09/18/%E8%A2%AB3%E6%95%B4%E9%99%A4%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>http://voids3.github.io/voids3.github.io/2019/09/18/被3整除的子序列/</id>
    <published>2019-09-18T13:46:38.000Z</published>
    <updated>2019-09-18T14:11:05.420Z</updated>
    
    <content type="html"><![CDATA[<p>解题思路：1.首先要明白子序列的意思：如qwwweec，（qwe,wec等都是它的子序列）;<br>          2.一个数如果可以被3整除，那么各位数之和也可以被3整除。<br>          3.dp[i][j]表示前i位数子序列的余数为j的个数；（m表示余数，dp[i][j]应该等于dp[i-1][j]+dp[i-1][(j+3-m)%3]的和再模mod）；<br>          令后半部分为dp[i-1][x],所以(x+m)%3=j+3,即x=(j+3-m)%3。</p><a id="more"></a><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> ss;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;ss;</span><br><span class="line"><span class="keyword">int</span> len = ss.length();</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">55</span>][<span class="number">3</span>];</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">dp[<span class="number">0</span>][(ss[<span class="number">0</span>]-<span class="string">'0'</span>)%<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> m=(ss[i]-<span class="string">'0'</span>)%<span class="number">3</span>;</span><br><span class="line"><span class="comment">//dp[i][m]=(dp[i][m]+1)%mod;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">dp[i][j]=(dp[i<span class="number">-1</span>][j]+dp[i<span class="number">-1</span>][(j+<span class="number">3</span>-m)%<span class="number">3</span>])%mod;<span class="comment">//dp公式</span></span><br><span class="line">&#125;</span><br><span class="line">dp[i][m]=(dp[i][m]+<span class="number">1</span>)%mod;<span class="comment">//初始化时为0，故计算时需加1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[len<span class="number">-1</span>][<span class="number">0</span>]%mod&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解题思路：1.首先要明白子序列的意思：如qwwweec，（qwe,wec等都是它的子序列）;&lt;br&gt;          2.一个数如果可以被3整除，那么各位数之和也可以被3整除。&lt;br&gt;          3.dp[i][j]表示前i位数子序列的余数为j的个数；（m表示余数，dp[i][j]应该等于dp[i-1][j]+dp[i-1][(j+3-m)%3]的和再模mod）；&lt;br&gt;          令后半部分为dp[i-1][x],所以(x+m)%3=j+3,即x=(j+3-m)%3。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://voids3.github.io/voids3.github.io/categories/C/"/>
    
    
      <category term="dp" scheme="http://voids3.github.io/voids3.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-154</title>
    <link href="http://voids3.github.io/voids3.github.io/2019/09/18/leetcode-154/"/>
    <id>http://voids3.github.io/voids3.github.io/2019/09/18/leetcode-154/</id>
    <published>2019-09-18T01:40:38.000Z</published>
    <updated>2019-09-18T09:09:00.738Z</updated>
    
    <content type="html"><![CDATA[<p>反转每对括号间的子串</p><p>题目链接：<a href="https://leetcode-cn.com/problems/reverse-substrings-between-each-pair-of-parentheses/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-substrings-between-each-pair-of-parentheses/</a></p><p>解题思路：未遇到右括号前就压栈，遇到右括号后就反转最近的左括号与右括号之间的元素，最后需要反转输出<br>        反转括号间的元素可以用栈来操作，先出栈再入栈。</p><a id="more"></a><p>Code:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line"><span class="symbol">public:</span></span><br><span class="line">    string reverseParentheses(string s) &#123;</span><br><span class="line">        string ss<span class="comment">;</span></span><br><span class="line">        ss=s<span class="comment">;</span></span><br><span class="line">        stack&lt;char&gt;<span class="built_in">s1</span><span class="comment">;</span></span><br><span class="line">        int len = ss.length()<span class="comment">;</span></span><br><span class="line">        for(int i=<span class="number">0</span><span class="comment">;i&lt;len;i++)&#123;</span></span><br><span class="line">            if(ss[i]==<span class="string">')'</span>)&#123;</span><br><span class="line">                string ch=<span class="string">""</span><span class="comment">;</span></span><br><span class="line">                while(<span class="built_in">s1</span>.top()!=<span class="string">'('</span>)&#123;</span><br><span class="line">                    ch+=<span class="built_in">s1</span>.top()<span class="comment">;</span></span><br><span class="line">                    <span class="built_in">s1</span>.pop()<span class="comment">;</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">s1</span>.pop()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">                for(int <span class="keyword">j=0;j&lt;ch.length();j++)&#123;</span></span><br><span class="line"><span class="keyword"> </span>                   <span class="built_in">s1</span>.push(ch[<span class="keyword">j]);</span></span><br><span class="line"><span class="keyword"> </span>               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                <span class="built_in">s1</span>.push(ss[i])<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        string tt=<span class="string">""</span><span class="comment">;</span></span><br><span class="line">        while(!<span class="built_in">s1</span>.empty())&#123;</span><br><span class="line">            tt+=<span class="built_in">s1</span>.top()<span class="comment">;</span></span><br><span class="line">            <span class="built_in">s1</span>.pop()<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">        reverse(tt.<span class="keyword">begin(),tt.end());</span></span><br><span class="line"><span class="keyword"> </span>       return tt<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>K次串联后最大子数组之和  </p><p>题目链接：<a href="https://leetcode-cn.com/problems/k-concatenation-maximum-sum/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/k-concatenation-maximum-sum/</a></p><p>解题思路：lmax表示单个数组的最大前缀和，rmax表示单个数组的最大后缀和，maxx表示单个数组最大连续和,sum表示单个数组总和<br>          1.如果n==1;返回maxx即可<br>          2.如果n&gt;1;如果sum&gt;=0;比较maxx与sum*(k-2)+lmax+rmax.<br>          如果sum&lt;0;比较maxx与lmax+rmax.</p><p>Code:</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> kConcatenationMaxSum(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        typedef <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">mod</span>=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">        ll lmax=<span class="number">0</span>,rmax=<span class="number">0</span>;</span><br><span class="line">        ll cur=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n=arr.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            cur+=arr[i];</span><br><span class="line">            lmax=max(lmax,cur);</span><br><span class="line">        &#125;</span><br><span class="line">        cur=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            cur+=arr[i];</span><br><span class="line">            rmax=max(rmax,cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最大连续和</span></span><br><span class="line">        ll maxx=<span class="number">0</span>,<span class="keyword">sum</span>=<span class="number">0</span>;</span><br><span class="line">        cur=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">sum</span>+=arr[i];</span><br><span class="line">            cur+=arr[i];</span><br><span class="line">            <span class="keyword">if</span>(cur&lt;<span class="number">0</span>) cur=<span class="number">0</span>;</span><br><span class="line">            maxx=max(maxx,cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>) <span class="keyword">return</span> maxx%<span class="keyword">mod</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//sum&gt;=0</span></span><br><span class="line">            maxx=max(maxx,lmax+rmax+(k<span class="number">-2</span>)*<span class="keyword">sum</span>);</span><br><span class="line">            <span class="comment">//sum&lt;0</span></span><br><span class="line">            maxx=max(maxx,lmax+rmax);</span><br><span class="line">            <span class="keyword">return</span> maxx%<span class="keyword">mod</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;反转每对括号间的子串&lt;/p&gt;&lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode-cn.com/problems/reverse-substrings-between-each-pair-of-parentheses/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode-cn.com/problems/reverse-substrings-between-each-pair-of-parentheses/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;解题思路：未遇到右括号前就压栈，遇到右括号后就反转最近的左括号与右括号之间的元素，最后需要反转输出&lt;br&gt;        反转括号间的元素可以用栈来操作，先出栈再入栈。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://voids3.github.io/voids3.github.io/categories/C/"/>
    
    
      <category term="杂记" scheme="http://voids3.github.io/voids3.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Minimum Sum LCM</title>
    <link href="http://voids3.github.io/voids3.github.io/2019/09/14/Minimum-Sum-LCM/"/>
    <id>http://voids3.github.io/voids3.github.io/2019/09/14/Minimum-Sum-LCM/</id>
    <published>2019-09-14T03:02:34.000Z</published>
    <updated>2019-09-29T11:53:05.745Z</updated>
    
    <content type="html"><![CDATA[<p>解题思路：</p><p>首先需要知道分解质因数的知识，其次需要注意到两个点。</p><p>1.如果n为质数或为1，因为求lcm最少需要两个数，所以结果应为n+1.</p><p>2.如果一个数有多个相同的质因子，应将他们相乘后再相加，如4，8；他们的结果应为质因子相乘后再加1.</p><p>Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll n,k=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n)&amp;&amp;n)&#123;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt;ve;</span><br><span class="line"><span class="built_in">map</span>&lt;ll,ll&gt;ma;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">2</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">ve.push_back(i);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">while</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">ma[i]++;</span><br><span class="line">n/=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!ve.size())&#123;<span class="comment">//ve.size()==0,说明n为质数 </span></span><br><span class="line">ans=n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(ve.size()==<span class="number">1</span> || n!=<span class="number">1</span>)<span class="comment">//如果ve.size()==1,说明只有一个相同的质因子，此时n==1,应加上n </span></span><br><span class="line">ans += n;<span class="comment">//如果n!=1且ve.size()&gt;1,此时n&gt;1，根据唯一分解定理，应加上n </span></span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;ve.size();i++)&#123;</span><br><span class="line">ans += <span class="built_in">pow</span>(ve[i],ma[ve[i]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %lld: %lld\n"</span>,k++,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;解题思路：&lt;/p&gt;
&lt;p&gt;首先需要知道分解质因数的知识，其次需要注意到两个点。&lt;/p&gt;
&lt;p&gt;1.如果n为质数或为1，因为求lcm最少需要两个数，所以结果应为n+1.&lt;/p&gt;
&lt;p&gt;2.如果一个数有多个相同的质因子，应将他们相乘后再相加，如4，8；他们的结果应为质因子相乘后
      
    
    </summary>
    
    
      <category term="C++" scheme="http://voids3.github.io/voids3.github.io/categories/C/"/>
    
    
      <category term="唯一分解定理" scheme="http://voids3.github.io/voids3.github.io/tags/%E5%94%AF%E4%B8%80%E5%88%86%E8%A7%A3%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
</feed>
