<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>惊鸿</title>
  
  
  <link href="/voids3.github.io/atom.xml" rel="self"/>
  
  <link href="http://voids3.github.io/voids3.github.io/"/>
  <updated>2019-09-28T13:15:03.972Z</updated>
  <id>http://voids3.github.io/voids3.github.io/</id>
  
  <author>
    <name>voids</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Gathering Children</title>
    <link href="http://voids3.github.io/voids3.github.io/2019/09/28/Gathering-Children/"/>
    <id>http://voids3.github.io/voids3.github.io/2019/09/28/Gathering-Children/</id>
    <published>2019-09-28T12:43:38.000Z</published>
    <updated>2019-09-28T13:15:03.972Z</updated>
    
    <content type="html"><![CDATA[<p>解题思路：最后数只会留在相邻的RL两个位置，对于每个L,用id数组记录左边离它最近的R位置，对于每个R，记录右边离它最近的L的位置;类似于以下情况：</p><p>i:      1 2 3 4 5 6 7 8 9  10  11   12<br> —-     R R L L L L R L R  R   L    L<br>id[i]:  3 3 2 2 2 2 8 7 11 11  10   10 </p><a id="more"></a><pre><code>然后遍历整个字符串，t=abs(i-id[i]);L:t为奇数，最后到L位置，否则到R位置R:t为奇数，最后到R位置，否则到L位置</code></pre><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> idx,id[<span class="number">100005</span>],ans[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,ch+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> n=<span class="built_in">strlen</span>(ch+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[i]==<span class="string">'L'</span>) id[i]=idx;</span><br><span class="line"><span class="keyword">else</span> idx=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[i]==<span class="string">'R'</span>) id[i]=idx;</span><br><span class="line"><span class="keyword">else</span> idx=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[i]==<span class="string">'L'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>((i-id[i])%<span class="number">2</span>==<span class="number">1</span>) ans[id[i]+<span class="number">1</span>]++;</span><br><span class="line"><span class="keyword">else</span> ans[id[i]]++; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>((id[i]-i)%<span class="number">2</span>==<span class="number">1</span>) ans[id[i]<span class="number">-1</span>]++;</span><br><span class="line"><span class="keyword">else</span> ans[id[i]]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解题思路：最后数只会留在相邻的RL两个位置，对于每个L,用id数组记录左边离它最近的R位置，对于每个R，记录右边离它最近的L的位置;类似于以下情况：&lt;/p&gt;&lt;p&gt;i:      1 2 3 4 5 6 7 8 9  10  11   12&lt;br&gt; —-     R R L L L L R L R  R   L    L&lt;br&gt;id[i]:  3 3 2 2 2 2 8 7 11 11  10   10 &lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://voids3.github.io/voids3.github.io/categories/C/"/>
    
    
      <category term="模拟" scheme="http://voids3.github.io/voids3.github.io/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>Alyona and Spreadsheet</title>
    <link href="http://voids3.github.io/voids3.github.io/2019/09/22/Alyona-and-Spreadsheet/"/>
    <id>http://voids3.github.io/voids3.github.io/2019/09/22/Alyona-and-Spreadsheet/</id>
    <published>2019-09-22T15:02:44.000Z</published>
    <updated>2019-09-29T11:52:38.423Z</updated>
    
    <content type="html"><![CDATA[<p>解题思路：</p><pre><code>用二维数组逐个查找会超时，用多个一维数组来表示：a[]存储每一行的值，b[]表示每一列最高能到达的行数,c[]表示每一行的数最高能到达的行数；具体看代码。</code></pre><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],b[N],c[N];<span class="comment">//每一行的值，每一列能到达的最上行，每一行能到达的最上行 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,x;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) b[i]=<span class="number">1</span>;<span class="comment">//初始化最上行为1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">c[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line"><span class="keyword">if</span>(x&lt;a[j]) b[j]=i;<span class="comment">//更新每一列最高到达的行数</span></span><br><span class="line">a[j]=x;<span class="comment">//更新一行每列的值</span></span><br><span class="line"><span class="keyword">if</span>(c[i]&gt;b[j]) c[i]=b[j];<span class="comment">//c表示最高能到达的行数，越小行数越高</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> k,l,r;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line"><span class="keyword">while</span>(k--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="keyword">if</span>(c[r]&lt;=l)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;解题思路：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;用二维数组逐个查找会超时，用多个一维数组来表示：


a[]存储每一行的值，b[]表示每一列最高能到达的行数,c[]表示每一行的数最高能到达的行数
；具体看代码。&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Code:&lt;/p&gt;
&lt;figure c
      
    
    </summary>
    
    
      <category term="C++" scheme="http://voids3.github.io/voids3.github.io/categories/C/"/>
    
    
      <category term="cf" scheme="http://voids3.github.io/voids3.github.io/tags/cf/"/>
    
  </entry>
  
  <entry>
    <title>删括号</title>
    <link href="http://voids3.github.io/voids3.github.io/2019/09/19/%E5%88%A0%E6%8B%AC%E5%8F%B7/"/>
    <id>http://voids3.github.io/voids3.github.io/2019/09/19/删括号/</id>
    <published>2019-09-19T15:09:19.000Z</published>
    <updated>2019-09-19T15:23:03.482Z</updated>
    
    <content type="html"><![CDATA[<p>原题链接：<a href="https://ac.nowcoder.com/acm/problem/21303" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/problem/21303</a></p><p>解题思路：用dp[i][j][k]数组，i表示s1前i个字符，j表示s2的前j个字符，k=s1删去的’(‘-s1删去的’)’;<br>    如果s1前i个字符删去k个 ‘(‘ 与s2相符，则令dp[i][j][k]==true，最终只要满足dp[len1-1][len2-1][0]==true,即为Possible</p><a id="more"></a><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> dp[N][N][N]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> ss,tt;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;ss&gt;&gt;tt;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">int</span> len1=ss.length();</span><br><span class="line"><span class="keyword">int</span> len2=tt.length();</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len1;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len2;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;len1/<span class="number">2</span>;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[i][j][k])&#123;</span><br><span class="line"><span class="comment">//当删除恰好为"()",且符合目标状态 </span></span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">0</span>&amp;&amp;ss[i+<span class="number">1</span>]==tt[j+<span class="number">1</span>]) dp[i+<span class="number">1</span>][j+<span class="number">1</span>][k]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//下一字符为"(",差值k+1 </span></span><br><span class="line"><span class="keyword">if</span>(ss[i+<span class="number">1</span>]==<span class="string">'('</span>) dp[i+<span class="number">1</span>][j][k+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//凑够(),删去),差值k-1 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k) dp[i+<span class="number">1</span>][j][k<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dp[len1<span class="number">-1</span>][len2<span class="number">-1</span>][<span class="number">0</span>]) <span class="built_in">printf</span>(<span class="string">"Possible\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原题链接：&lt;a href=&quot;https://ac.nowcoder.com/acm/problem/21303&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ac.nowcoder.com/acm/problem/21303&lt;/a&gt;&lt;/p&gt;&lt;p&gt;解题思路：用dp[i][j][k]数组，i表示s1前i个字符，j表示s2的前j个字符，k=s1删去的’(‘-s1删去的’)’;&lt;br&gt;    如果s1前i个字符删去k个 ‘(‘ 与s2相符，则令dp[i][j][k]==true，最终只要满足dp[len1-1][len2-1][0]==true,即为Possible&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://voids3.github.io/voids3.github.io/categories/C/"/>
    
    
      <category term="dp" scheme="http://voids3.github.io/voids3.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>[HNOI2003]操作系统 </title>
    <link href="http://voids3.github.io/voids3.github.io/2019/09/19/HNOI2003-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>http://voids3.github.io/voids3.github.io/2019/09/19/HNOI2003-操作系统/</id>
    <published>2019-09-19T14:53:44.000Z</published>
    <updated>2019-09-19T15:08:45.442Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://ac.nowcoder.com/acm/problem/20030" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/problem/20030</a></p><p>解题思路：首先建立一个优先队列，队列中元素由优先级从大到小排列，如果优先级相同，则按开始时间从小到大排列<br>        如果队列为空，则向其中添加进程，进程进行过程有以下两种情况<br>        1.j进程可以在i进程开始之前结束，则将j进程从队列踢出并进行输出<br>        2.j进程不能在i进程开始之前结束，则更新j进程的操作时间，然后重新入队<br>        （如果i进程优先级小于等于j进程，由于i的开始时间小于j，故j进程仍比i进程先进行完，但还要比较j进程是否与其他进程的开始时间冲突）</p><a id="more"></a><p>Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> id,st,ct,pr;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (node a,node b)&#123;<span class="comment">//优先队列 </span></span><br><span class="line"><span class="keyword">if</span>(a.pr==b.pr) <span class="keyword">return</span> a.st&gt;b.st;<span class="comment">//如果优先级相同，返回开始时间小的 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> a.pr&lt;b.pr;<span class="comment">//返回优先级大的 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;tt[N];</span><br><span class="line"></span><br><span class="line">priority_queue&lt;node&gt;q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;tt[cnt].id,&amp;tt[cnt].st,&amp;tt[cnt].ct,&amp;tt[cnt].pr)) cnt++;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> now;</span><br><span class="line"><span class="keyword">while</span>(i&lt;cnt)&#123;</span><br><span class="line"><span class="keyword">if</span>(q.empty()) q.push(tt[i]),now=tt[i].st,i++;<span class="comment">//队列为空，则向其中添加元素 </span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">node bb=q.top();q.pop();</span><br><span class="line"><span class="keyword">if</span>(now+bb.ct&lt;=tt[i].st)&#123;<span class="comment">//队顶进程能在下一个进程开始前完成 </span></span><br><span class="line">now+=bb.ct;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %lld\n"</span>,bb.id,now);</span><br><span class="line"><span class="comment">//q.push(tt[i]);now=tt[i].st;i++; //直接加入不行，但不知道原因</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">bb.ct=bb.ct-tt[i].st+now;<span class="comment">//如果不能完成，则更新队顶进程的操作时间，重新入队 </span></span><br><span class="line">now=tt[i].st;</span><br><span class="line">q.push(bb),q.push(tt[i]);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())&#123;<span class="comment">//将队列中剩余元素输出 </span></span><br><span class="line">node dd=q.top();</span><br><span class="line">q.pop();</span><br><span class="line">now+=dd.ct;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %lld\n"</span>,dd.id,now);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://ac.nowcoder.com/acm/problem/20030&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ac.nowcoder.com/acm/problem/20030&lt;/a&gt;&lt;/p&gt;&lt;p&gt;解题思路：首先建立一个优先队列，队列中元素由优先级从大到小排列，如果优先级相同，则按开始时间从小到大排列&lt;br&gt;        如果队列为空，则向其中添加进程，进程进行过程有以下两种情况&lt;br&gt;        1.j进程可以在i进程开始之前结束，则将j进程从队列踢出并进行输出&lt;br&gt;        2.j进程不能在i进程开始之前结束，则更新j进程的操作时间，然后重新入队&lt;br&gt;        （如果i进程优先级小于等于j进程，由于i的开始时间小于j，故j进程仍比i进程先进行完，但还要比较j进程是否与其他进程的开始时间冲突）&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://voids3.github.io/voids3.github.io/categories/C/"/>
    
    
      <category term="优先队列" scheme="http://voids3.github.io/voids3.github.io/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>被3整除的子序列 </title>
    <link href="http://voids3.github.io/voids3.github.io/2019/09/18/%E8%A2%AB3%E6%95%B4%E9%99%A4%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>http://voids3.github.io/voids3.github.io/2019/09/18/被3整除的子序列/</id>
    <published>2019-09-18T13:46:38.000Z</published>
    <updated>2019-09-18T14:11:05.420Z</updated>
    
    <content type="html"><![CDATA[<p>解题思路：1.首先要明白子序列的意思：如qwwweec，（qwe,wec等都是它的子序列）;<br>          2.一个数如果可以被3整除，那么各位数之和也可以被3整除。<br>          3.dp[i][j]表示前i位数子序列的余数为j的个数；（m表示余数，dp[i][j]应该等于dp[i-1][j]+dp[i-1][(j+3-m)%3]的和再模mod）；<br>          令后半部分为dp[i-1][x],所以(x+m)%3=j+3,即x=(j+3-m)%3。</p><a id="more"></a><p>Code:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> ss;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;ss;</span><br><span class="line"><span class="keyword">int</span> len = ss.length();</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">55</span>][<span class="number">3</span>];</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">dp[<span class="number">0</span>][(ss[<span class="number">0</span>]-<span class="string">'0'</span>)%<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> m=(ss[i]-<span class="string">'0'</span>)%<span class="number">3</span>;</span><br><span class="line"><span class="comment">//dp[i][m]=(dp[i][m]+1)%mod;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">dp[i][j]=(dp[i<span class="number">-1</span>][j]+dp[i<span class="number">-1</span>][(j+<span class="number">3</span>-m)%<span class="number">3</span>])%mod;<span class="comment">//dp公式</span></span><br><span class="line">&#125;</span><br><span class="line">dp[i][m]=(dp[i][m]+<span class="number">1</span>)%mod;<span class="comment">//初始化时为0，故计算时需加1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp[len<span class="number">-1</span>][<span class="number">0</span>]%mod&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解题思路：1.首先要明白子序列的意思：如qwwweec，（qwe,wec等都是它的子序列）;&lt;br&gt;          2.一个数如果可以被3整除，那么各位数之和也可以被3整除。&lt;br&gt;          3.dp[i][j]表示前i位数子序列的余数为j的个数；（m表示余数，dp[i][j]应该等于dp[i-1][j]+dp[i-1][(j+3-m)%3]的和再模mod）；&lt;br&gt;          令后半部分为dp[i-1][x],所以(x+m)%3=j+3,即x=(j+3-m)%3。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://voids3.github.io/voids3.github.io/categories/C/"/>
    
    
      <category term="dp" scheme="http://voids3.github.io/voids3.github.io/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-154</title>
    <link href="http://voids3.github.io/voids3.github.io/2019/09/18/leetcode-154/"/>
    <id>http://voids3.github.io/voids3.github.io/2019/09/18/leetcode-154/</id>
    <published>2019-09-18T01:40:38.000Z</published>
    <updated>2019-09-18T09:09:00.738Z</updated>
    
    <content type="html"><![CDATA[<p>反转每对括号间的子串</p><p>题目链接：<a href="https://leetcode-cn.com/problems/reverse-substrings-between-each-pair-of-parentheses/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-substrings-between-each-pair-of-parentheses/</a></p><p>解题思路：未遇到右括号前就压栈，遇到右括号后就反转最近的左括号与右括号之间的元素，最后需要反转输出<br>        反转括号间的元素可以用栈来操作，先出栈再入栈。</p><a id="more"></a><p>Code:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line"><span class="symbol">public:</span></span><br><span class="line">    string reverseParentheses(string s) &#123;</span><br><span class="line">        string ss<span class="comment">;</span></span><br><span class="line">        ss=s<span class="comment">;</span></span><br><span class="line">        stack&lt;char&gt;<span class="built_in">s1</span><span class="comment">;</span></span><br><span class="line">        int len = ss.length()<span class="comment">;</span></span><br><span class="line">        for(int i=<span class="number">0</span><span class="comment">;i&lt;len;i++)&#123;</span></span><br><span class="line">            if(ss[i]==<span class="string">')'</span>)&#123;</span><br><span class="line">                string ch=<span class="string">""</span><span class="comment">;</span></span><br><span class="line">                while(<span class="built_in">s1</span>.top()!=<span class="string">'('</span>)&#123;</span><br><span class="line">                    ch+=<span class="built_in">s1</span>.top()<span class="comment">;</span></span><br><span class="line">                    <span class="built_in">s1</span>.pop()<span class="comment">;</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">s1</span>.pop()<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">                for(int <span class="keyword">j=0;j&lt;ch.length();j++)&#123;</span></span><br><span class="line"><span class="keyword"> </span>                   <span class="built_in">s1</span>.push(ch[<span class="keyword">j]);</span></span><br><span class="line"><span class="keyword"> </span>               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                <span class="built_in">s1</span>.push(ss[i])<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        string tt=<span class="string">""</span><span class="comment">;</span></span><br><span class="line">        while(!<span class="built_in">s1</span>.empty())&#123;</span><br><span class="line">            tt+=<span class="built_in">s1</span>.top()<span class="comment">;</span></span><br><span class="line">            <span class="built_in">s1</span>.pop()<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">        reverse(tt.<span class="keyword">begin(),tt.end());</span></span><br><span class="line"><span class="keyword"> </span>       return tt<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>K次串联后最大子数组之和  </p><p>题目链接：<a href="https://leetcode-cn.com/problems/k-concatenation-maximum-sum/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/k-concatenation-maximum-sum/</a></p><p>解题思路：lmax表示单个数组的最大前缀和，rmax表示单个数组的最大后缀和，maxx表示单个数组最大连续和,sum表示单个数组总和<br>          1.如果n==1;返回maxx即可<br>          2.如果n&gt;1;如果sum&gt;=0;比较maxx与sum*(k-2)+lmax+rmax.<br>          如果sum&lt;0;比较maxx与lmax+rmax.</p><p>Code:</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> kConcatenationMaxSum(vector&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        typedef <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">mod</span>=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">        ll lmax=<span class="number">0</span>,rmax=<span class="number">0</span>;</span><br><span class="line">        ll cur=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n=arr.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            cur+=arr[i];</span><br><span class="line">            lmax=max(lmax,cur);</span><br><span class="line">        &#125;</span><br><span class="line">        cur=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            cur+=arr[i];</span><br><span class="line">            rmax=max(rmax,cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最大连续和</span></span><br><span class="line">        ll maxx=<span class="number">0</span>,<span class="keyword">sum</span>=<span class="number">0</span>;</span><br><span class="line">        cur=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">sum</span>+=arr[i];</span><br><span class="line">            cur+=arr[i];</span><br><span class="line">            <span class="keyword">if</span>(cur&lt;<span class="number">0</span>) cur=<span class="number">0</span>;</span><br><span class="line">            maxx=max(maxx,cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>) <span class="keyword">return</span> maxx%<span class="keyword">mod</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//sum&gt;=0</span></span><br><span class="line">            maxx=max(maxx,lmax+rmax+(k<span class="number">-2</span>)*<span class="keyword">sum</span>);</span><br><span class="line">            <span class="comment">//sum&lt;0</span></span><br><span class="line">            maxx=max(maxx,lmax+rmax);</span><br><span class="line">            <span class="keyword">return</span> maxx%<span class="keyword">mod</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;反转每对括号间的子串&lt;/p&gt;&lt;p&gt;题目链接：&lt;a href=&quot;https://leetcode-cn.com/problems/reverse-substrings-between-each-pair-of-parentheses/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode-cn.com/problems/reverse-substrings-between-each-pair-of-parentheses/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;解题思路：未遇到右括号前就压栈，遇到右括号后就反转最近的左括号与右括号之间的元素，最后需要反转输出&lt;br&gt;        反转括号间的元素可以用栈来操作，先出栈再入栈。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://voids3.github.io/voids3.github.io/categories/C/"/>
    
    
      <category term="杂记" scheme="http://voids3.github.io/voids3.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Minimum Sum LCM</title>
    <link href="http://voids3.github.io/voids3.github.io/2019/09/14/Minimum-Sum-LCM/"/>
    <id>http://voids3.github.io/voids3.github.io/2019/09/14/Minimum-Sum-LCM/</id>
    <published>2019-09-14T03:02:34.000Z</published>
    <updated>2019-09-29T11:53:05.745Z</updated>
    
    <content type="html"><![CDATA[<p>解题思路：</p><p>首先需要知道分解质因数的知识，其次需要注意到两个点。</p><p>1.如果n为质数或为1，因为求lcm最少需要两个数，所以结果应为n+1.</p><p>2.如果一个数有多个相同的质因子，应将他们相乘后再相加，如4，8；他们的结果应为质因子相乘后再加1.</p><p>Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll n,k=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n)&amp;&amp;n)&#123;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;ll&gt;ve;</span><br><span class="line"><span class="built_in">map</span>&lt;ll,ll&gt;ma;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">2</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">ve.push_back(i);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">while</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">ma[i]++;</span><br><span class="line">n/=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!ve.size())&#123;<span class="comment">//ve.size()==0,说明n为质数 </span></span><br><span class="line">ans=n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(ve.size()==<span class="number">1</span> || n!=<span class="number">1</span>)<span class="comment">//如果ve.size()==1,说明只有一个相同的质因子，此时n==1,应加上n </span></span><br><span class="line">ans += n;<span class="comment">//如果n!=1且ve.size()&gt;1,此时n&gt;1，根据唯一分解定理，应加上n </span></span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;ve.size();i++)&#123;</span><br><span class="line">ans += <span class="built_in">pow</span>(ve[i],ma[ve[i]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %lld: %lld\n"</span>,k++,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;解题思路：&lt;/p&gt;
&lt;p&gt;首先需要知道分解质因数的知识，其次需要注意到两个点。&lt;/p&gt;
&lt;p&gt;1.如果n为质数或为1，因为求lcm最少需要两个数，所以结果应为n+1.&lt;/p&gt;
&lt;p&gt;2.如果一个数有多个相同的质因子，应将他们相乘后再相加，如4，8；他们的结果应为质因子相乘后
      
    
    </summary>
    
    
      <category term="C++" scheme="http://voids3.github.io/voids3.github.io/categories/C/"/>
    
    
      <category term="唯一分解定理" scheme="http://voids3.github.io/voids3.github.io/tags/%E5%94%AF%E4%B8%80%E5%88%86%E8%A7%A3%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
</feed>
